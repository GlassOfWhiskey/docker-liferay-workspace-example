project.ext {

	bundleDirPath = project.hasProperty('liferay.workspace.home.dir') ?
		(project.getProperty('liferay.workspace.home.dir').toString()) :
		(project.projectDir.toString() + '/bundles')
		
	dockerComposeFilePath = project.hasProperty('liferay.docker.compose.path') ?
		(project.getProperty('liferay.docker.compose.path')) :
		(project.projectDir.toString() + '/docker/docker-compose.yml')
		
	dockerContainerPrefix = project.hasProperty('liferay.docker.container.prefix') ?
		(project.getProperty('liferay.docker.container.prefix')) :
		('liferay')

	dockerImageName = project.hasProperty('liferay.docker.image.name') ?
		(project.getProperty('liferay.docker.image.name')) :
		('liferay-portal:latest')
	
	dockerDbRootPassword = project.hasProperty('liferay.docker.db.root.password') ?
		(project.getProperty('liferay.docker.db.root.password')) :
		('p@ssword')
}

task startDockerEnv(
	description: 'Inits docker project environment.',
	group: 'docker',
	type: Exec
) {

	executable 'docker-compose'
	args('-p', project.dockerContainerPrefix, '-f', project.dockerComposeFilePath, 'up', '--force-recreate', '-d')
	
	environment('DB_ROOT_PASSWORD', project.dockerDbRootPassword)
	environment('LIFERAY_BUNDLE_DIR', project.bundleDirPath)
}

task stopDockerEnv(
	description: 'Shuts down docker project environment.',
	group: 'docker',
	type: Exec
) {
	
	executable 'docker-compose'
	args('-p', project.dockerContainerPrefix, '-f', project.dockerComposeFilePath, 'down')
		
	environment('DB_ROOT_PASSWORD', project.dockerDbRootPassword)
	environment('LIFERAY_BUNDLE_DIR', project.bundleDirPath)
}

task buildDockerImage(
	description: 'Builds a Liferay Docker image based on the current local environment.',
	group: 'docker',
	type: Exec
) {

	executable 'docker'
	args('build', '--force-rm=true', '-t', project.dockerImageName, '.')
}